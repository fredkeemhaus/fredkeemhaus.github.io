{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/2021-12-28/",
    "result": {"data":{"cur":{"id":"a5d9ef7f-ed4b-58ff-acec-28d8e696c487","html":"<p>첫번 째 과제 수행(<strong>Alarm System Call</strong>)을 수행하기 위해 알아야할 Thread에 대해 알아보자.</p>\n<h2 id=\"-프로세스의-문제점\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\" 프로세스의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👉 프로세스의 문제점</h2>\n<p>프로그램이 메모리에 로딩되어 실행 중인 상태인 <strong>프로세스</strong>(Process)를 기반으로 하는 멀티태스킹은 여러 프로세스를 동시에 실행시킴으로써 **CPU(Central Processing Unit)**의 활용률과 시스템의 처리율을 높였다. 그 결과 다양한 멀티태스킹 어플리케이션이 등장하게 되었지만 다음과 같은 여러 문제점들이 제기되었다.</p>\n<h3 id=\"프로세스-생성에-따른-큰-오버헤드\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%9D%EC%84%B1%EC%97%90-%EB%94%B0%EB%A5%B8-%ED%81%B0-%EC%98%A4%EB%B2%84%ED%97%A4%EB%93%9C\" aria-label=\"프로세스 생성에 따른 큰 오버헤드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 생성에 따른 큰 오버헤드</h3>\n<p>프로세스마다 독립적인 메모리 공간을 갖기 때문에 자식 프로세스에게 부모 프로세스와는 별도로 메모리를 할당할 공간에 부모 프로세스를 복사하게되어 프로세스 생성에 많은 시간이 소요된다. 운영체제도 새로 생성되는 프로세스를 위해 <strong>PCB(Process Control Block)</strong>, 페이지 테이블 등 프로세스 관리를 위한 구조체를 생성하는 데 많은 시간이 걸린다.</p>\n<h3 id=\"비효율적인-프로세스-컨텍스트-스위칭\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%EC%9C%84%EC%B9%AD\" aria-label=\"비효율적인 프로세스 컨텍스트 스위칭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비효율적인 프로세스 컨텍스트 스위칭</h3>\n<ul>\n<li>CPU가 현재 실행 중인 프로세스의 논리 주소와 물리 주소의 페이지 테이블을 새로 실행될 프로세스의 페이지 테이블로 교체하는 시간</li>\n<li>현재 실행 중인 프로세스의 컨텍스트(ex. CPU 레지스터 등)를 PCB에 저장하고 새로 실행될 프로세스의 PCB로 부터 컨텍스트를 CPU로 옮기는 시간</li>\n<li>캐시 메모리에 들어 있는 현재 프로세스의 코드나 데이터를 지우고 새로 실행될 프로세스의 코드와 데이터를 로딩하는 시간</li>\n</ul>\n<blockquote>\n<p>위와 같이 현재 실행 중인 프로세스를 중단시키고 다른 프로세스를 실행시키는 컨텍스트 스위칭에 따른 <strong>시공간적 오버헤드</strong>가 크다.</p>\n</blockquote>\n<h3 id=\"프로세스-간-통신의-어려움\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B0%84-%ED%86%B5%EC%8B%A0%EC%9D%98-%EC%96%B4%EB%A0%A4%EC%9B%80\" aria-label=\"프로세스 간 통신의 어려움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 간 통신의 어려움</h3>\n<p>프로세스들은 각자 독립된 공간을 가지고 있기 때문에 다른 프로세스의 메모리에 접근할 수 없다. 그래서 프로세스들은 <em>공유 메모리(sharded memory)</em>, <em>신호(signal)</em>, <em>파이프(pipe)</em>, <em>파일(file)</em>, <em>소켓(socket)</em>, <em>메시지 큐(message queue)</em>, <em>세마포(semaphore)</em>, <em>메모리 맵 파일(memory mapped filed, MMF)</em> 등 다양한 방법을 통해 커널 메모리나 커널에 의해 마련된 제 3의 메모리 공간을 이용하여 데이터를 주고 받았다.</p>\n<blockquote>\n<p>하지만 위 기능들은 다음과 같은 이유로 사용에 있어 여러 <strong>어려움</strong>이 있다.</p>\n</blockquote>\n<ul>\n<li>거의 모두 커널의 직접적인 지원을 받음</li>\n<li>운영체제에 따른 호환성이 부족함</li>\n<li>개념적으로 복잡하며 코딩이 어렵고 실행 속도가 느림</li>\n</ul>\n<hr>\n<h2 id=\"-스레드의-출현-목적\" style=\"position:relative;\"><a href=\"#-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B6%9C%ED%98%84-%EB%AA%A9%EC%A0%81\" aria-label=\" 스레드의 출현 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👉 스레드의 출현 목적</h2>\n<p>위와 같은 프로세스의 문제점들을 해결하고자 하는 필요성이 증가함에 따라 스레드 (thread)라는 새로운 실행 단위가 출현하게 되었다.</p>\n<ul>\n<li>프로세스보다 크기가 작은 실행 단위의 필요</li>\n<li>프로세스의 생성 및 소멸에 따른 오버헤드 감소</li>\n<li>빠른 컨텍스트 스위칭</li>\n<li>프로세스들의 느린 실행 속도와 통신 시간 개선</li>\n<li>복잡한 방법으로 인한 코딩 등의 어려움 해소</li>\n</ul>\n<hr>\n<h2 id=\"-스레드의-상태와-작동\" style=\"position:relative;\"><a href=\"#-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%83%81%ED%83%9C%EC%99%80-%EC%9E%91%EB%8F%99\" aria-label=\" 스레드의 상태와 작동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👉 스레드의 상태와 작동</h2>\n<h3 id=\"1-상태state\" style=\"position:relative;\"><a href=\"#1-%EC%83%81%ED%83%9Cstate\" aria-label=\"1 상태state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 상태(state)</h3>\n<p>스레드는 프로세스처럼 생성부터 소멸까지 여러 상태를 거치는 Life cycle을 가지고 있다. 운영체제마다 조금씩 다르게 구현되어 있지만 일반적으로 *준비(ready state), 실행(running state), 대기(bloked state), 종료(terminated state)*의 4가지 상태를 가지며 이 정보는 <strong>TCB(Thread Control Block)</strong> 구조체에 저장된다.</p>\n<h4 id=\"준비-상태-ready-state\" style=\"position:relative;\"><a href=\"#%EC%A4%80%EB%B9%84-%EC%83%81%ED%83%9C-ready-state\" aria-label=\"준비 상태 ready state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>준비 상태 (ready state)</h4>\n<ul>\n<li>스레드가 생성된 후 스케줄 되기를 기다리는 상태</li>\n<li>실행 상태의 스레드의 할당된 시간이 경과되거나 스레드 스스로 CPU 사용을 양보하는 경우</li>\n<li>대기 상태의 스레드가 입출력이 완료되거나 타임아웃을 통해 자원을 획득하는 경우</li>\n</ul>\n<h4 id=\"실행-상태-running-state\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%83%81%ED%83%9C-running-state\" aria-label=\"실행 상태 running state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 상태 (running state)</h4>\n<ul>\n<li>준비 상태의 스레드가 스케줄링 되어 현재 CPU에 의해 실행된 경우</li>\n</ul>\n<h4 id=\"대기-상태-blocked-state\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B8%B0-%EC%83%81%ED%83%9C-blocked-state\" aria-label=\"대기 상태 blocked state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대기 상태 (blocked state)</h4>\n<ul>\n<li>스레드가 입출력을 요청하거나 <code class=\"language-text\">sleep()</code>과 같은 시스템 호출로 인해 커널에 의해 중단된 경우</li>\n</ul>\n<h4 id=\"종료-상태-terminated-state\" style=\"position:relative;\"><a href=\"#%EC%A2%85%EB%A3%8C-%EC%83%81%ED%83%9C-terminated-state\" aria-label=\"종료 상태 terminated state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종료 상태 (terminated state)</h4>\n<ul>\n<li>스레드가 스스로 종료하거나 또는 프로세스가 종료된 상태</li>\n</ul>\n<p><img src=\"https://images.velog.io/images/fredkeemhaus/post/a43486be-8d60-4fa0-9c1c-39fe8cf9d060/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-12-28%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%204.09.02.png\" alt=\"\"></p>\n<h3 id=\"2-작동-operation\" style=\"position:relative;\"><a href=\"#2-%EC%9E%91%EB%8F%99-operation\" aria-label=\"2 작동 operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 작동 (operation)</h3>\n<p>스레드의 존재를 인식하고 다룰 수 있는 커널이나 스레드 라이브러리에 의해 이루어지는 작동은 <em>생성(create), 조인(join), 양보(yield), 종료(termination)</em> 등이 있다.</p>\n<h4 id=\"스레드-생성thread-create\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%83%9D%EC%84%B1thread-create\" aria-label=\"스레드 생성thread create permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 생성(thread create)</h4>\n<p>프로세스와 마찬가지로 스레드는 새로운 스레드를 생성할 수 있다. 그러나 부모 스레드가 종료한다고 자식 스레드도 종료되는 것은 아니기 때문에 프로세스의 부모자식 관계에 비하면 스레드의 부모자식 관계의 의미는 크지 않다.</p>\n<h4 id=\"스레드-조인thread-join\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%A1%B0%EC%9D%B8thread-join\" aria-label=\"스레드 조인thread join permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 조인(thread join)</h4>\n<p>한 스레드가 다른 스레드가 작업을 끝내고 종료할 때까지 기다리는 것이 조인이다. 아무 스레드나 다른 스레드를 조인할 수 있으나, 일반적으로 부모 스레드가 특정 작업을 위해 자식 스레드를 생성하여 일을 시키고 자식 스레드가 작업을 완료하기를 기다릴 때 주로 사용한다.</p>\n<h4 id=\"스레드-양보thread-yield\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%96%91%EB%B3%B4thread-yield\" aria-label=\"스레드 양보thread yield permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 양보(thread yield)</h4>\n<p>실행 중인 스레드가 스스로 CPU를 다른 스레드에게 양보하기 위해 실행을 중단하는 행위가 양보이다. 양보한 스레드는 커널에 의해 준비 상태(ready state)가 되어 준비 큐(queue)에 들어가고, 준비 큐에 있는 스레드 중 하나가 스케줄링되어 실행된다. 이 기능은 매우 비싼 자원인 CPU를 스스로 다른 스레드에게 양보함으로써 효율적으로 사용하기 위해 만들어졌다.</p>\n<h4 id=\"스레드-종료thread-termination\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%A2%85%EB%A3%8Cthread-termination\" aria-label=\"스레드 종료thread termination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드 종료(thread termination)</h4>\n<p>프로세스의 종료는 <code class=\"language-text\">exit()</code> 시스템 호출을 호출하여 해당 프로세스를 비롯한 모든 스레드가 종료되는 것을 의미한다. 이와 달리 스레드 종료는 <code class=\"language-text\">pthread_exit()</code>과 같이 스레드만 종료시키는 함수를 호출하는 경우이다. 이 때, 부모 스레드의 종료와 자식 스레드의 종료는 무관하며, 프로세스에 속한 마지막 스레드가 종료될 때 프로세스가 종료된다. 스레드가 다른 스레드를 생성할 수는 있었지만 강제로 종료할 수 있는 방법은 기본적으로 제공되지 않고 약속된 신호를 통해 스스로 종료하도록 설계하는 작업이 필요하다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">👉 프로세스의 문제점</a></p>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%9D%EC%84%B1%EC%97%90-%EB%94%B0%EB%A5%B8-%ED%81%B0-%EC%98%A4%EB%B2%84%ED%97%A4%EB%93%9C\">프로세스 생성에 따른 큰 오버헤드</a></li>\n<li><a href=\"#%EB%B9%84%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%EC%9C%84%EC%B9%AD\">비효율적인 프로세스 컨텍스트 스위칭</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B0%84-%ED%86%B5%EC%8B%A0%EC%9D%98-%EC%96%B4%EB%A0%A4%EC%9B%80\">프로세스 간 통신의 어려움</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B6%9C%ED%98%84-%EB%AA%A9%EC%A0%81\">👉 스레드의 출현 목적</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%83%81%ED%83%9C%EC%99%80-%EC%9E%91%EB%8F%99\">👉 스레드의 상태와 작동</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EC%83%81%ED%83%9Cstate\">1. 상태(state)</a></p>\n<ul>\n<li><a href=\"#%EC%A4%80%EB%B9%84-%EC%83%81%ED%83%9C-ready-state\">준비 상태 (ready state)</a></li>\n<li><a href=\"#%EC%8B%A4%ED%96%89-%EC%83%81%ED%83%9C-running-state\">실행 상태 (running state)</a></li>\n<li><a href=\"#%EB%8C%80%EA%B8%B0-%EC%83%81%ED%83%9C-blocked-state\">대기 상태 (blocked state)</a></li>\n<li><a href=\"#%EC%A2%85%EB%A3%8C-%EC%83%81%ED%83%9C-terminated-state\">종료 상태 (terminated state)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EC%9E%91%EB%8F%99-operation\">2. 작동 (operation)</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%83%9D%EC%84%B1thread-create\">스레드 생성(thread create)</a></li>\n<li><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%A1%B0%EC%9D%B8thread-join\">스레드 조인(thread join)</a></li>\n<li><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%96%91%EB%B3%B4thread-yield\">스레드 양보(thread yield)</a></li>\n<li><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%A2%85%EB%A3%8Cthread-termination\">스레드 종료(thread termination)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"첫번 째 과제 수행(Alarm System Call)을 수행하기 위해 알아야할 Thread에 대해 알아보자. 👉 프로세스의 문제점 프로그램이 메모리에 로딩되어 실행 중인 상태인 프로세스(Process)를 기반으로 하는 멀티태스킹은 여러 프로세스를 동시에 실행시킴으로써 **CPU(Central Processing Unit)**의 활용률과 시스템의 처리율을 높였다. 그 결과 다양한 멀티태스킹 어플리케이션이 등장하게 되었지만 다음과 같은 여러 문제점들이 제기되었다. 프로세스 생성에 따른 큰 오버헤드 프로세스마다 독립적인 메모리 공간을 갖기 때문에 자식 프로세스에게 부모 프로세스와는 별도로 메모리를 할당할 공간에 부모 프로세스를 복사하게되어 프로세스 생성에 많은 시간이 소요된다. 운영체제도 새로 생성되는 프로세스를 위해 PCB(Process Control Block), 페이지 테이블 등 프로세스 관리를 위한 구조체를 생성하는 데 많은 시간이 걸린다. 비효율적인 프로세스 컨텍스트 스위칭 C…","frontmatter":{"date":"December 28, 2021","title":"PintOS - Thread","categories":"운영체제 PintOS","author":"프레드","emoji":"🧢"},"fields":{"slug":"/2021-12-28/"}},"next":{"id":"5793badb-2b7d-5faa-9fdc-17c2a79cdd60","html":"<p>정글에 온지 한 주가 흘러간다.</p>\n<p>정글에 들어온 후, 블로그를 매일 꾸준하게 적겠노라 다짐했지만 과제로서 처음 블로그에 글을 작성하게 되는 것에 대해 반성하며..</p>\n<hr />\n<h3 id=\"지나온-과거에-대한-성찰\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EB%82%98%EC%98%A8-%EA%B3%BC%EA%B1%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%84%B1%EC%B0%B0\" aria-label=\"지나온 과거에 대한 성찰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지나온 과거에 대한 성찰</h3>\n<p>3~4년 전, 대학 동안 배운 것을 그만두고, 우연찮은 기회로 개발에 대해 접하게 되었다. (아마, 국가산업전략 관련 광고 글이 SNS를 지배했던 것으로 기억..) 광고를 보고 어렴풋이 초등학교 때, HTML, CSS 등 간단하게 배웠던 기억이 스쳐지나갔다. 이것저것 찾아보다 프론트엔드 개발에 대해 알게되었고, 디자인을 공부한 것과 관련이 없지는 않겠지, 라는 생각에 발을 딛게 된 것 같다.</p>\n<p>취업을 위한 공부를 한 덕에 어떻게 취업은 했지만(?), 전공지식의 부재로 인해 연차가 쌓일수록 불안감이 커져갔다. 일을 시작하고 개발자라는 집단에 매력을 크게 느꼈기에 이 일을 오래하고 싶었고, 지금 나에게 도움되는 사람들처럼 나도 언젠가 누군가에게 도움을 주는 사람이고 싶었다.</p>\n<p>그래서 여기저기 많이 둘러보게된 것 같다. 2~3년 사이에 꽤나 많은 부트캠프, 학원, 강의 등 쏟아져나왔고, 그 중 <em><strong>“프론트엔드 / 백엔드 올인원, 취업 과정”</strong></em> 과 같은 내가 이미 겪은 실무 기술을 배워 취업을 위한 강의가 지배적이었다.</p>\n<p>물론, 정글도 단기적으로는 취업이 목표이지만,\n”<strong>5년, 10년 후에도 성장할 수 있는 개발자로 거듭나세요.</strong>”\n라는 말에 이끌렸던 것 같다.</p>\n<hr />\n<h3 id=\"5개월-동안-내가-어떤-것을-얻어가고-싶은지\" style=\"position:relative;\"><a href=\"#5%EA%B0%9C%EC%9B%94-%EB%8F%99%EC%95%88-%EB%82%B4%EA%B0%80-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%84-%EC%96%BB%EC%96%B4%EA%B0%80%EA%B3%A0-%EC%8B%B6%EC%9D%80%EC%A7%80\" aria-label=\"5개월 동안 내가 어떤 것을 얻어가고 싶은지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5개월 동안 내가 어떤 것을 얻어가고 싶은지</h3>\n<p>내가 부족한 부분이 어떤 것인지 알고 왔기에, 그 얻고자 했던 지식을 가능한 많이 얻어가는 것이 목표이다. 또한, 비전공자로서 많이 부족했던 부분이 “같은 일을 하는 사람들”이 주변에 많이 없다는 것이었다. 나와 같은 목적으로 들어온 3기 분들과도 좋은 관계를 유지하고 싶다.</p>\n<hr />\n<h3 id=\"어떤-자세로-임하고-싶은지\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%A4-%EC%9E%90%EC%84%B8%EB%A1%9C-%EC%9E%84%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80%EC%A7%80\" aria-label=\"어떤 자세로 임하고 싶은지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떤 자세로 임하고 싶은지</h3>\n<p>꽤 오랜기간 <strong>“집단=경쟁”</strong> 이라고 생각하고 살아왔는데, 장병규 의장님께서 시작하기 전, “사람마다 속도는 다르다. 이 곳에선 ‘오늘 나의 성장’에 집중해야 한다.”라고 말씀하셔서 그런지 경쟁이라기보단, 살아오며 처음으로 내 페이스라는 것을 잡아가고 있는 듯 하다.</p>\n<p>말 그대로 내가 공부하는 습관, 내가 5 ~ 10년 후에도 성장할 수 있는 개발자가 되기 위해서는 지치지 않는 방법을 찾도록 나를 알아가는 것과 동시에 최선을 다해 성장하고자 한다.</p>\n<hr />\n<h3 id=\"정글이-끝난-후-나의-모습은-어땠으면-좋겠는지\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B8%80%EC%9D%B4-%EB%81%9D%EB%82%9C-%ED%9B%84-%EB%82%98%EC%9D%98-%EB%AA%A8%EC%8A%B5%EC%9D%80-%EC%96%B4%EB%95%A0%EC%9C%BC%EB%A9%B4-%EC%A2%8B%EA%B2%A0%EB%8A%94%EC%A7%80\" aria-label=\"정글이 끝난 후 나의 모습은 어땠으면 좋겠는지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정글이 끝난 후 나의 모습은 어땠으면 좋겠는지</h3>\n<p>앞서 말한 것과 같이 지금 나에게 도움되는 사람들처럼 나도 언젠가 누군가에게 도움을 주는 사람이고 싶다. WEEK00에 팀프로젝트를 진행하였는데, 이해하고 있다라고 생각되었던 부분이 전달하려니 힘들었다. 현재로서는 누군가에게 도움을 줄 경력조차 되지 않지만, 적어도 내가 겪은 문제 등에 대해 온전히 내 것으로 흡수하여 다른 사람에게 이야기할 때, 혼선이 생기지 않도록 잘 전달할 수 있는 사람. **“같이/다시 일하고 싶은 사람”**이 나의 모습이면 좋을 것 같다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%A7%80%EB%82%98%EC%98%A8-%EA%B3%BC%EA%B1%B0%EC%97%90-%EB%8C%80%ED%95%9C-%EC%84%B1%EC%B0%B0\">지나온 과거에 대한 성찰</a></li>\n<li><a href=\"#5%EA%B0%9C%EC%9B%94-%EB%8F%99%EC%95%88-%EB%82%B4%EA%B0%80-%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%84-%EC%96%BB%EC%96%B4%EA%B0%80%EA%B3%A0-%EC%8B%B6%EC%9D%80%EC%A7%80\">5개월 동안 내가 어떤 것을 얻어가고 싶은지</a></li>\n<li><a href=\"#%EC%96%B4%EB%96%A4-%EC%9E%90%EC%84%B8%EB%A1%9C-%EC%9E%84%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80%EC%A7%80\">어떤 자세로 임하고 싶은지</a></li>\n<li><a href=\"#%EC%A0%95%EA%B8%80%EC%9D%B4-%EB%81%9D%EB%82%9C-%ED%9B%84-%EB%82%98%EC%9D%98-%EB%AA%A8%EC%8A%B5%EC%9D%80-%EC%96%B4%EB%95%A0%EC%9C%BC%EB%A9%B4-%EC%A2%8B%EA%B2%A0%EB%8A%94%EC%A7%80\">정글이 끝난 후 나의 모습은 어땠으면 좋겠는지</a></li>\n</ul>\n</div>","frontmatter":{"date":"November 02, 2021","title":"특별한 과제 - Week01","categories":"블로그 featured","author":"프레드","emoji":"🧢"},"fields":{"slug":"/2021-11-02/"}},"prev":{"id":"21b3b5f7-4ec5-5c45-9f1f-c74bc86dc96f","html":"<h1 id=\"wil-keyword\" style=\"position:relative;\"><a href=\"#wil-keyword\" aria-label=\"wil keyword permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WIL keyword</h1>\n<blockquote>\n<ul>\n<li><strong>Alarm Clock</strong>: busy-wait, interrupt</li>\n</ul>\n</blockquote>\n<ul>\n<li><strong>Priority Scheduling(1)</strong>: thread waiting, list priority, semaphore waiting list</li>\n<li><strong>Priority Scheduling(2)</strong>: priority donation</li>\n</ul>\n<h2 id=\"-alarm-clock\" style=\"position:relative;\"><a href=\"#-alarm-clock\" aria-label=\" alarm clock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⏰ Alarm Clock</h2>\n<h3 id=\"스레드의-상태와-작동-상태\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%83%81%ED%83%9C%EC%99%80-%EC%9E%91%EB%8F%99-%EC%83%81%ED%83%9C\" aria-label=\"스레드의 상태와 작동 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스레드의 상태와 작동 (상태)</h3>\n<p>스레드는 프로세스처럼 생성부터 소멸까지 여러 상태를 거치는 Life cycle을 가지고 있다. 운영체제마다 조금씩 다르게 구현되어 있지만 일반적으로 <code class=\"language-text\">준비(ready state)</code>, <code class=\"language-text\">실행(running state)</code>, <code class=\"language-text\">대기(bloked state)</code>, <code class=\"language-text\">종료(terminated state)</code>의 4가지 상태를 가지며 이 정보는 <strong>TCB(Thread Control Block)</strong> 구조체에 저장된다.</p>\n<h3 id=\"준비-상태-ready-state\" style=\"position:relative;\"><a href=\"#%EC%A4%80%EB%B9%84-%EC%83%81%ED%83%9C-ready-state\" aria-label=\"준비 상태 ready state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>준비 상태 (ready state)</h3>\n<ul>\n<li>스레드가 생성된 후 스케줄 되기를 기다리는 상태</li>\n<li>실행 상태의 스레드의 할당된 시간이 경과되거나 스레드 스스로 CPU 사용을 양보하는 경우</li>\n<li>대기 상태의 스레드가 입출력이 완료되거나 타임아웃을 통해 자원을 획득하는 경우</li>\n</ul>\n<h4 id=\"실행-상태-running-state\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%83%81%ED%83%9C-running-state\" aria-label=\"실행 상태 running state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 상태 (running state)</h4>\n<ul>\n<li>준비 상태의 스레드가 스케줄링 되어 현재 CPU에 의해 실행된 경우</li>\n</ul>\n<h3 id=\"대기-상태-blocked-state\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B8%B0-%EC%83%81%ED%83%9C-blocked-state\" aria-label=\"대기 상태 blocked state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대기 상태 (blocked state)</h3>\n<ul>\n<li>스레드가 입출력을 요청하거나 <code class=\"language-text\">sleep()</code>과 같은 시스템 호출로 인해 커널에 의해 중단된 경우</li>\n</ul>\n<h3 id=\"종료-상태-terminated-state\" style=\"position:relative;\"><a href=\"#%EC%A2%85%EB%A3%8C-%EC%83%81%ED%83%9C-terminated-state\" aria-label=\"종료 상태 terminated state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종료 상태 (terminated state)</h3>\n<ul>\n<li>스레드가 스스로 종료하거나 또는 프로세스가 종료된 상태</li>\n</ul>\n<p><img src=\"https://images.velog.io/images/fredkeemhaus/post/a43486be-8d60-4fa0-9c1c-39fe8cf9d060/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-12-28%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%204.09.02.png\" alt=\"\"></p>\n<h2 id=\"-과제-목표\" style=\"position:relative;\"><a href=\"#-%EA%B3%BC%EC%A0%9C-%EB%AA%A9%ED%91%9C\" aria-label=\" 과제 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 과제 목표</h2>\n<p><a href=\"https://velog.io/@fredkeemhaus/PintOS-Project-1-Alarm-Clock-%EC%9E%91%EC%84%B1%EC%A4%91\">https://velog.io/@fredkeemhaus/PintOS-Project-1-Alarm-Clock-%EC%9E%91%EC%84%B1%EC%A4%91</a></p>\n<hr>\n<h2 id=\"️-priority-scheduling\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-priority-scheduling\" aria-label=\"️ priority scheduling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚖️ Priority Scheduling</h2>\n<p>기본적으로 제공되는 pintos의 스케줄러는 <code class=\"language-text\">Round-Robin(RR)</code>으로 구현되어 있다. 우선순위를 고려하지 않기 때문에 스레드가 unblock 되거나 생성될 때 무조건 <code class=\"language-text\">ready_list</code>의 맨 뒤에 삽입하고 선점이 발생하지도 않는다. 이번 과제는 RR로 구현된 것을 우선순위를 고려하는 <code class=\"language-text\">Preemptive Priority Scheduling</code>으로 수정함으로써 새로운 스레드의 우선순위가 현재 실행 중인 스레드의 우선순위보다 높다면, 새로운 스레드가 실행 중인 스레드를 선점하도록 한다.</p>\n<h3 id=\"rr-round-robin\" style=\"position:relative;\"><a href=\"#rr-round-robin\" aria-label=\"rr round robin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RR (Round Robin)</h3>\n<p><img src=\"https://images.velog.io/images/fredkeemhaus/post/0c49c15d-bde3-4daa-a7ed-10419126f3fc/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-12-27%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.24.01.png\" alt=\"\"></p>\n<ul>\n<li>\n<p><strong>선점 (Preemptive scheduling)</strong></p>\n</li>\n<li>\n<p><strong>스케줄링 기준 (Criteria)</strong>\n도착 시간 (ready queue 기준)\n먼저 도착한 프로세스를 먼저 처리</p>\n</li>\n<li>\n<p><strong><span style=\"color: red;\">자원 사용 제한 시간(time quantum)이 있음</span></strong>\n<strong>System parameter(δ)</strong>\n프로세스는 할당된 시간이 지나면 자원 반납 (Timer runout)\n특정 프로세스의 자원 독점 방지\nContext switch overhead가 큼</p>\n</li>\n<li>\n<p><strong>대화형, 시분할 시스템(Time Sharing)에 적합</strong></p>\n</li>\n<li>\n<p>Time quantum(δ)이 시스템 성능을 결정하는 핵심 요소\nVery large(infinite)δ -> <strong>FCFS</strong>\nVery Small time quantum -> <strong>processor sharing</strong></p>\n</li>\n</ul>\n<blockquote>\n<p><strong>장점:</strong> 사용자는 모든 프로세스가 각각의 프로세서 위에서 실행되는 것처럼 느낌. (체감 프로세서 속도 = 실제 프로세서 성능의 1/n\n<strong>단점:</strong> High context switch overhead</p>\n</blockquote>\n<h2 id=\"-과제-목표-1\" style=\"position:relative;\"><a href=\"#-%EA%B3%BC%EC%A0%9C-%EB%AA%A9%ED%91%9C-1\" aria-label=\" 과제 목표 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 과제 목표</h2>\n<p>작성 예정</p>\n<hr>\n<h2 id=\"-priority-scheduling-and-synchronization\" style=\"position:relative;\"><a href=\"#-priority-scheduling-and-synchronization\" aria-label=\" priority scheduling and synchronization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👬 Priority Scheduling and Synchronization</h2>\n<p>해당 과제에서는 **동기화(Synchronization)**에 대해서 알아보았다.</p>\n<p>여러 스레드가 lock, semaphore, condition variable 을 얻기 위해 기다릴\n경우 우선순위가 가장 높은 thread가 CPU를 점유 하도록 구현해야 한다. 현재 핀토스는 semaphore를 대기 하고 있는 스레드들의 list인 waiters가 <code class=\"language-text\">FIFO</code>로 구현되어있다.</p>\n<p>다수의 작업을 동시에 실행시키는 멀티태스킹의 등장으로 병렬적으로 일을 처리함에 따라 응용프로그램의 실행 시간, 사용자에 대한 응답시간을 단축할 수 있게 되었다. 그러나 다수의 작업들이 공유 데이터에 동시에 접근하게 될 시에는 데이터가 훼손되는 문제가 발생할 수 있다. 즉, 여러 스레드가 공유 변수에 접근하려고 경쟁(race) 하는 상황에서 적절한 처리가 되지 않는다면 아래와 같이 의도치 않은, 잘못된 데이터가 저장될 가능성이 존재한다.</p>\n<p>여러 thread가 <code class=\"language-text\">lock</code>, <code class=\"language-text\">semaphore</code>, <code class=\"language-text\">condition variable</code>을 얻기 위해 기다릴 경우 우선순위가 가장 높은 thread가 CPU를 점유하도록 해야 한다.</p>\n<h3 id=\"상호배제mutual-exclusion\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%98%B8%EB%B0%B0%EC%A0%9Cmutual-exclusion\" aria-label=\"상호배제mutual exclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상호배제(Mutual Exclusion)</h3>\n<p>상호배제는 임계 구역에 먼저 진입한 스레드가 독점적으로 해당 구역의 실행을 끝낼 때까지 다른 스레드가 진입하지 못하도록 관리하여 공유 데이터의 훼손을 방지하는 알고리즘이다.</p>\n<p>여기서 임계 구역(critical section 또는 critical region)은 공유 데이터에 접근하는 코드로, 하나의 스레드의 배타적인 사용이 보장되어야 한다. 진입 코드(entry code)와 출구 코드(exit code)를 두어 임계 구역에 대한 상호배제를 만든다.</p>\n<ul>\n<li><code class=\"language-text\">진입 코드</code>: 다른 스레드가 임계 구역에 있는지 체크하여 없으면 다른 스레드가 들어오지 못하도록 하고, 있으면 안에 있는 스레드가 임계 구역을 벗어나기를 기다림</li>\n<li><code class=\"language-text\">출구 코드</code>: 임계 구역의 실행을 마치면 대기 중인 스레드나 다른 스레드가 임계 구역에 들어올 수 있도록 들어오지 못하게 조치를 취한 것을 해제함</li>\n</ul>\n<h3 id=\"멀티-스레드-동기화-기법\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C-%EB%8F%99%EA%B8%B0%ED%99%94-%EA%B8%B0%EB%B2%95\" aria-label=\"멀티 스레드 동기화 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멀티 스레드 동기화 기법</h3>\n<p><code class=\"language-text\">뮤텍스(Mutex)</code>, <code class=\"language-text\">스핀락(Spinlock)</code>, <code class=\"language-text\">세마포어(Semaphore)</code> 등 다양한 방법으로 멀티 스레드를 동기화 할 수 있다. 과제와 크게 관련성은 없지만 세마포어가 언급되므로 어떤 기법들인지만 살펴보자.</p>\n<h4 id=\"1-뮤텍스mutex\" style=\"position:relative;\"><a href=\"#1-%EB%AE%A4%ED%85%8D%EC%8A%A4mutex\" aria-label=\"1 뮤텍스mutex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 뮤텍스(Mutex)</h4>\n<p>lock을 이용하여 오직 한 스레드만이 자원을 독점적으로 사용하도록 하는 동기화 기법으로, 대기 큐가 존재하며 임계 구역의 실행 시간이 짧은 경우에는 lock이 잠겨있는 시간보다 스레드가 sleep 상태에서 깨어나는데 더 긴 시간이 낭비되어 비효율적이다. 따라서 임계 구역의 실행 시간이 긴 경우와 단일 CPU 시스템, 사용자 프로그램에 적합하다.</p>\n<h4 id=\"2-스핀락spinlock\" style=\"position:relative;\"><a href=\"#2-%EC%8A%A4%ED%95%80%EB%9D%BDspinlock\" aria-label=\"2 스핀락spinlock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 스핀락(Spinlock)</h4>\n<p>뮤텍스와 마찬가지로 lock을 기반으로 하는 동기화 기법이지만 대기 큐가 없고 lock이 풀릴 때까지 무한 루프를 돌면서 lock을 검사하는 코드를 실행(busy-waiting) 하기 때문에 단일 CPU를 가진 운영체제에서는 의미 없이 기다리며 CPU를 낭비하면서도 다른 스레드의 실행 기회도 빼앗아 비효율적이다. 따라서 임계 구역의 코드가 짧은 경우와 멀티 코어를 가진 시스템, 커널 코드나 인터럽트 서비스 루틴에 효과적이다.</p>\n<h4 id=\"3-세마포어semaphore\" style=\"position:relative;\"><a href=\"#3-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4semaphore\" aria-label=\"3 세마포어semaphore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 세마포어(Semaphore)</h4>\n<p>동시에 사용할 수 있는 하나의 자원에 대해 스레드들이 공유하도록 관리하는 동기화 프로그래밍 기법이자 공유 자원의 개수를 나타내는 변수로, 하나의 자원은 여러 인스턴스를 포함한다. 자원에 대한 다중 스레드의 원활한 공유를 목적으로 하며, P(Proberen: try in Dutch)/V(Verhogen: increment in Dutch) 연산을 통해 대기 큐나 무한 루프 방식으로 자원을 얻을 때까지 대기(busy-waiting) 하다가 자원 사용을 마치면 대기 스레드에 알려 스레드 동기화를 이룬다.</p>\n<h2 id=\"-과제-목표-2\" style=\"position:relative;\"><a href=\"#-%EA%B3%BC%EC%A0%9C-%EB%AA%A9%ED%91%9C-2\" aria-label=\" 과제 목표 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 과제 목표</h2>\n<p>작성 예정</p>\n<hr>\n<h2 id=\"priority-inversion-problem\" style=\"position:relative;\"><a href=\"#priority-inversion-problem\" aria-label=\"priority inversion problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Priority Inversion Problem</h2>\n<p>작성 예정</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-alarm-clock\">⏰ Alarm Clock</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%83%81%ED%83%9C%EC%99%80-%EC%9E%91%EB%8F%99-%EC%83%81%ED%83%9C\">스레드의 상태와 작동 (상태)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A4%80%EB%B9%84-%EC%83%81%ED%83%9C-ready-state\">준비 상태 (ready state)</a></p>\n<ul>\n<li><a href=\"#%EC%8B%A4%ED%96%89-%EC%83%81%ED%83%9C-running-state\">실행 상태 (running state)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8C%80%EA%B8%B0-%EC%83%81%ED%83%9C-blocked-state\">대기 상태 (blocked state)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A2%85%EB%A3%8C-%EC%83%81%ED%83%9C-terminated-state\">종료 상태 (terminated state)</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B3%BC%EC%A0%9C-%EB%AA%A9%ED%91%9C\">🎯 과제 목표</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-priority-scheduling\">⚖️ Priority Scheduling</a></p>\n<ul>\n<li><a href=\"#rr-round-robin\">RR (Round Robin)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B3%BC%EC%A0%9C-%EB%AA%A9%ED%91%9C-1\">🎯 과제 목표</a></p>\n</li>\n<li>\n<p><a href=\"#-priority-scheduling-and-synchronization\">👬 Priority Scheduling and Synchronization</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%83%81%ED%98%B8%EB%B0%B0%EC%A0%9Cmutual-exclusion\">상호배제(Mutual Exclusion)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C-%EB%8F%99%EA%B8%B0%ED%99%94-%EA%B8%B0%EB%B2%95\">멀티 스레드 동기화 기법</a></p>\n<ul>\n<li><a href=\"#1-%EB%AE%A4%ED%85%8D%EC%8A%A4mutex\">1. 뮤텍스(Mutex)</a></li>\n<li><a href=\"#2-%EC%8A%A4%ED%95%80%EB%9D%BDspinlock\">2. 스핀락(Spinlock)</a></li>\n<li><a href=\"#3-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4semaphore\">3. 세마포어(Semaphore)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B3%BC%EC%A0%9C-%EB%AA%A9%ED%91%9C-2\">🎯 과제 목표</a></p>\n</li>\n<li>\n<p><a href=\"#priority-inversion-problem\">Priority Inversion Problem</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 30, 2021","title":"PintOS - WIL","categories":"운영체제 PintOS","author":"프레드","emoji":"👏"},"fields":{"slug":"/2021-12-30/"}},"site":{"siteMetadata":{"siteUrl":"https://fredkeemhaus.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/2021-12-28/","nextSlug":"/2021-11-02/","prevSlug":"/2021-12-30/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}